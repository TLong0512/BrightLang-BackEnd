// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250826015143_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Context", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBelongTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RangeId");

                    b.ToTable("Context", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExamType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExamType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0f20da4-09d4-4ab8-ab62-b031e00ba9f2"),
                            Description = "TOPIK I (Cấp 1 và 2) là kỳ thi kiểm tra trình độ tiếng Hàn cấp độ sơ cấp, đánh giá kỹ năng nghe và đọc cơ bản dành cho người không phải bản ngữ. Kỳ thi kiểm tra khả năng giao tiếp đơn giản với 800–2.000 từ vựng. Được sử dụng cho nhập học đại học, xin visa (ví dụ: visa kết hôn hoặc định cư tại Hàn Quốc), công việc cấp nhập môn và mục tiêu học ngôn ngữ cá nhân, chứng chỉ TOPIK I có giá trị trong hai năm và được công nhận toàn cầu.",
                            IsDeleted = false,
                            Name = "TOPIK I"
                        },
                        new
                        {
                            Id = new Guid("38af4f71-911a-422f-9424-f3a24a3427f2"),
                            Description = "TOPIK II (Cấp 3–6) là kỳ thi kiểm tra trình độ tiếng Hàn từ trung cấp đến cao cấp, đánh giá kỹ năng nghe, đọc và viết dành cho người không phải bản ngữ. Kỳ thi đánh giá khả năng giao tiếp từ mức thông thường đến gần như người bản xứ. Được sử dụng cho nhập học đại học, công việc chuyên môn, xin visa, học bổng và thăng tiến nghề nghiệp, đặc biệt ở Việt Nam, chứng chỉ TOPIK II có giá trị trong hai năm và được công nhận toàn cầu.",
                            IsDeleted = false,
                            Name = "TOPIK II"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("Level", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7b61c72-a094-4f81-806e-1a75a878557d"),
                            ExamTypeId = new Guid("b0f20da4-09d4-4ab8-ab62-b031e00ba9f2"),
                            IsDeleted = false,
                            Name = "Cấp 1"
                        },
                        new
                        {
                            Id = new Guid("fcffbd73-5454-4af6-942d-645d120edac6"),
                            ExamTypeId = new Guid("b0f20da4-09d4-4ab8-ab62-b031e00ba9f2"),
                            IsDeleted = false,
                            Name = "Cấp 2"
                        },
                        new
                        {
                            Id = new Guid("3d463174-b4f8-4604-9056-e3638571bc40"),
                            ExamTypeId = new Guid("38af4f71-911a-422f-9424-f3a24a3427f2"),
                            IsDeleted = false,
                            Name = "Cấp 3"
                        },
                        new
                        {
                            Id = new Guid("58b35613-caf6-42f3-ace9-195f39f2ca86"),
                            ExamTypeId = new Guid("38af4f71-911a-422f-9424-f3a24a3427f2"),
                            IsDeleted = false,
                            Name = "Cấp 4"
                        },
                        new
                        {
                            Id = new Guid("7dc94003-4c5e-44d9-bc58-cf935d8f5fbc"),
                            ExamTypeId = new Guid("38af4f71-911a-422f-9424-f3a24a3427f2"),
                            IsDeleted = false,
                            Name = "Cấp 5"
                        },
                        new
                        {
                            Id = new Guid("40945347-4a3d-4938-9ba5-76901120f951"),
                            ExamTypeId = new Guid("38af4f71-911a-422f-9424-f3a24a3427f2"),
                            IsDeleted = false,
                            Name = "Cấp 6"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContextId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Range", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndQuestionNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartQuestionNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("Range", null, t =>
                        {
                            t.HasCheckConstraint("CK_QuestionRange_StartLessThanEnd", "[StartQuestionNumber] < [EndQuestionNumber]");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b824e232-ea18-4b28-9211-f646fd1896ef"),
                            EndQuestionNumber = 6,
                            IsDeleted = false,
                            Name = "Nghe câu ngắn, chọn đáp án đúng về tên, địa điểm, thời gian, hành động.",
                            SkillLevelId = new Guid("e8d1e161-73a9-46c0-abc3-1552188a0ead"),
                            StartQuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("67d9372e-53b5-42f6-b942-fb9403c511df"),
                            EndQuestionNumber = 10,
                            IsDeleted = false,
                            Name = "Chọn ý chính hoặc thông tin chi tiết trong hội thoại.",
                            SkillLevelId = new Guid("e8d1e161-73a9-46c0-abc3-1552188a0ead"),
                            StartQuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("135b5eea-7144-4ee2-94fd-2a4b4ca26402"),
                            EndQuestionNumber = 5,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ vào chỗ trống trong câu đơn giản.",
                            SkillLevelId = new Guid("c5afb485-fb72-4f70-842d-5f785281b516"),
                            StartQuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("21919199-2703-4d0f-92b5-b3046cdf7005"),
                            EndQuestionNumber = 10,
                            IsDeleted = false,
                            Name = "Chọn ngữ pháp phù hợp với câu.",
                            SkillLevelId = new Guid("c5afb485-fb72-4f70-842d-5f785281b516"),
                            StartQuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("4ee1ec87-0115-479b-a433-344dd1796364"),
                            EndQuestionNumber = 15,
                            IsDeleted = false,
                            Name = "Trả lời câu hỏi về thông báo, biển báo, hướng dẫn đơn giản.",
                            SkillLevelId = new Guid("c5afb485-fb72-4f70-842d-5f785281b516"),
                            StartQuestionNumber = 11
                        },
                        new
                        {
                            Id = new Guid("65d010e8-10c3-4336-9d1a-d01160dec39e"),
                            EndQuestionNumber = 15,
                            IsDeleted = false,
                            Name = "Chọn thông tin chi tiết hoặc ý chính trong đoạn hội thoại dài hơn.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 11
                        },
                        new
                        {
                            Id = new Guid("291ab660-46c5-441e-bf10-76c5b516e706"),
                            EndQuestionNumber = 20,
                            IsDeleted = false,
                            Name = "Chọn thông tin bổ sung từ thông báo hoặc đoạn hội thoại.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 16
                        },
                        new
                        {
                            Id = new Guid("19bdbded-e2c6-4595-adb8-06a33bd918f4"),
                            EndQuestionNumber = 25,
                            IsDeleted = false,
                            Name = "Chọn thái độ người nói hoặc ý nghĩa câu nói.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 21
                        },
                        new
                        {
                            Id = new Guid("2d76b832-7ce6-44d8-8c21-8693d992fe1a"),
                            EndQuestionNumber = 30,
                            IsDeleted = false,
                            Name = "Chọn mục đích người nói hoặc thông tin chi tiết nâng cao.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 26
                        },
                        new
                        {
                            Id = new Guid("0fbcf9e9-3585-4fc5-b85a-6773b8affb4d"),
                            EndQuestionNumber = 20,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ trong đoạn văn ngắn.",
                            SkillLevelId = new Guid("038dc84d-84bf-4017-8b51-49041d7c69f1"),
                            StartQuestionNumber = 16
                        },
                        new
                        {
                            Id = new Guid("4a044cb3-57e1-4530-b0d5-ca157cd95420"),
                            EndQuestionNumber = 25,
                            IsDeleted = false,
                            Name = "Chọn thông tin chi tiết trong đoạn văn ngắn.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 21
                        },
                        new
                        {
                            Id = new Guid("f79f4122-dfd6-4c73-b818-2f29dbef43e8"),
                            EndQuestionNumber = 30,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ vào câu trong đoạn văn.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 26
                        },
                        new
                        {
                            Id = new Guid("176ea83c-dff6-4b0f-a2d0-886487a7b989"),
                            EndQuestionNumber = 35,
                            IsDeleted = false,
                            Name = "Chọn ngữ pháp phù hợp trong đoạn văn.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 31
                        },
                        new
                        {
                            Id = new Guid("756aefc0-5d21-4aaa-8c42-e4f2a7ef168f"),
                            EndQuestionNumber = 40,
                            IsDeleted = false,
                            Name = "Chọn ý chính hoặc thông tin chi tiết trong đoạn văn.",
                            SkillLevelId = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            StartQuestionNumber = 36
                        },
                        new
                        {
                            Id = new Guid("78531118-1460-470a-9bbf-bfe41a1f49fc"),
                            EndQuestionNumber = 3,
                            IsDeleted = false,
                            Name = "Nghe hội thoại ngắn và chọn tranh/đáp án phù hợp.",
                            SkillLevelId = new Guid("bcb3d3cd-a148-4562-8b67-ee37c0263bc6"),
                            StartQuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("ef5c612c-2d81-4254-9bfb-dc8aadc8435b"),
                            EndQuestionNumber = 8,
                            IsDeleted = false,
                            Name = "Nghe câu/đoạn hội thoại đơn giản rồi chọn thông tin đúng.",
                            SkillLevelId = new Guid("bcb3d3cd-a148-4562-8b67-ee37c0263bc6"),
                            StartQuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("505d8202-28a9-4d86-bd97-94985fa4b05d"),
                            EndQuestionNumber = 12,
                            IsDeleted = false,
                            Name = "Nghe thông báo/hội thoại ngắn rồi chọn đáp án phù hợp với nội dung chính.",
                            SkillLevelId = new Guid("bcb3d3cd-a148-4562-8b67-ee37c0263bc6"),
                            StartQuestionNumber = 9
                        },
                        new
                        {
                            Id = new Guid("815f931d-ac7d-4052-bfe0-c1eb7f48c37a"),
                            EndQuestionNumber = 4,
                            IsDeleted = false,
                            Name = "Chọn ngữ pháp phù hợp cho câu văn.",
                            SkillLevelId = new Guid("1127b458-58e3-482c-8c9a-7cb897482375"),
                            StartQuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("ab9f96b1-dd7a-4361-82a5-98b849cb0a7c"),
                            EndQuestionNumber = 8,
                            IsDeleted = false,
                            Name = "Chọn chủ đề phù hợp dựa vào ảnh.",
                            SkillLevelId = new Guid("1127b458-58e3-482c-8c9a-7cb897482375"),
                            StartQuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("6056c922-bbac-4ad7-8109-1d83e54a1977"),
                            EndQuestionNumber = 12,
                            IsDeleted = false,
                            Name = "Chọn nội dung tương ứng với biểu đồ hoặc thông báo.",
                            SkillLevelId = new Guid("1127b458-58e3-482c-8c9a-7cb897482375"),
                            StartQuestionNumber = 9
                        },
                        new
                        {
                            Id = new Guid("9d5b8a10-c8f6-40a5-8ad3-3fb17098b0c1"),
                            EndQuestionNumber = 16,
                            IsDeleted = false,
                            Name = "Nghe hội thoại có tình huống rồi chọn hành động hoặc phản ứng thích hợp.",
                            SkillLevelId = new Guid("8aa5e695-9c2f-4f2b-a71d-482618517617"),
                            StartQuestionNumber = 13
                        },
                        new
                        {
                            Id = new Guid("9c63602d-30b7-433b-8091-44656cfb4bbc"),
                            EndQuestionNumber = 21,
                            IsDeleted = false,
                            Name = "Nghe đoạn hội thoại dài hơn rồi chọn đáp án đúng với mục đích hoặc ý chính.",
                            SkillLevelId = new Guid("8aa5e695-9c2f-4f2b-a71d-482618517617"),
                            StartQuestionNumber = 17
                        },
                        new
                        {
                            Id = new Guid("23390cda-3b35-44fa-9e65-14c71ccfdf3d"),
                            EndQuestionNumber = 24,
                            IsDeleted = false,
                            Name = "Nghe hội thoại ngắn rồi chọn nội dung tương ứng với phần gạch chân.",
                            SkillLevelId = new Guid("8aa5e695-9c2f-4f2b-a71d-482618517617"),
                            StartQuestionNumber = 22
                        },
                        new
                        {
                            Id = new Guid("98d23989-7ed5-4680-9ef0-acde9f106a95"),
                            EndQuestionNumber = 15,
                            IsDeleted = false,
                            Name = "Sắp xếp thứ tự câu văn sao cho hợp lý.",
                            SkillLevelId = new Guid("b163baf3-c72b-4763-b23b-001f7747e36c"),
                            StartQuestionNumber = 13
                        },
                        new
                        {
                            Id = new Guid("cc07c3d7-3e45-4114-abfe-ba8d21889bda"),
                            EndQuestionNumber = 22,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ vào chỗ trống trong đoạn văn.",
                            SkillLevelId = new Guid("b163baf3-c72b-4763-b23b-001f7747e36c"),
                            StartQuestionNumber = 16
                        },
                        new
                        {
                            Id = new Guid("096d3210-1a35-4861-a58e-0988ad989521"),
                            EndQuestionNumber = 24,
                            IsDeleted = false,
                            Name = "Chọn đáp án phù hợp với phần gạch chân trong đoạn văn.",
                            SkillLevelId = new Guid("b163baf3-c72b-4763-b23b-001f7747e36c"),
                            StartQuestionNumber = 22
                        },
                        new
                        {
                            Id = new Guid("9136138a-c6d3-4411-a6fd-75e2d946905b"),
                            EndQuestionNumber = 28,
                            IsDeleted = false,
                            Name = "Nghe hội thoại trung bình/dài rồi điền thông tin hoặc chọn ý chính.",
                            SkillLevelId = new Guid("5bda5fed-c4d5-4707-879d-b6abe6f6b787"),
                            StartQuestionNumber = 25
                        },
                        new
                        {
                            Id = new Guid("78b16532-6721-421b-be68-5f811e6f33f0"),
                            EndQuestionNumber = 33,
                            IsDeleted = false,
                            Name = "Nghe bài giảng/thuyết trình ngắn rồi chọn đáp án phù hợp với nội dung hoặc thái độ người nói.",
                            SkillLevelId = new Guid("5bda5fed-c4d5-4707-879d-b6abe6f6b787"),
                            StartQuestionNumber = 29
                        },
                        new
                        {
                            Id = new Guid("0f434d8f-8fef-427d-aa9c-b4130077d8ac"),
                            EndQuestionNumber = 37,
                            IsDeleted = false,
                            Name = "Nghe cuộc thảo luận/ý kiến trái chiều rồi chọn nội dung chính hoặc quan điểm nhân vật.",
                            SkillLevelId = new Guid("5bda5fed-c4d5-4707-879d-b6abe6f6b787"),
                            StartQuestionNumber = 34
                        },
                        new
                        {
                            Id = new Guid("90514cf2-aa9a-4bb9-b759-7258fb4e9eb2"),
                            EndQuestionNumber = 31,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ vào chỗ trống trong đoạn văn.",
                            SkillLevelId = new Guid("aca5da63-e3b8-4d4f-a337-982e7585ef95"),
                            StartQuestionNumber = 28
                        },
                        new
                        {
                            Id = new Guid("d1754294-90ea-42d0-86c2-5d6e07a1b04f"),
                            EndQuestionNumber = 38,
                            IsDeleted = false,
                            Name = "Chọn đáp án phù hợp với nội dung đoạn văn.",
                            SkillLevelId = new Guid("aca5da63-e3b8-4d4f-a337-982e7585ef95"),
                            StartQuestionNumber = 32
                        },
                        new
                        {
                            Id = new Guid("b47f4a10-b0e1-4e21-a403-0dcafcc6eec2"),
                            EndQuestionNumber = 40,
                            IsDeleted = false,
                            Name = "Nghe bài giảng/hội thoại dài rồi chọn đáp án phù hợp với ý chính hoặc lập luận.",
                            SkillLevelId = new Guid("83128ff4-d33d-40d6-87ee-b0013eb2521a"),
                            StartQuestionNumber = 38
                        },
                        new
                        {
                            Id = new Guid("118d0b47-3831-45e9-9ffa-1feaa8cfa678"),
                            EndQuestionNumber = 43,
                            IsDeleted = false,
                            Name = "Nghe thảo luận/phát biểu rồi chọn đáp án phù hợp với nội dung gạch chân.",
                            SkillLevelId = new Guid("83128ff4-d33d-40d6-87ee-b0013eb2521a"),
                            StartQuestionNumber = 41
                        },
                        new
                        {
                            Id = new Guid("4fcdbda9-66eb-4dfa-ac25-f3c9477afb43"),
                            EndQuestionNumber = 50,
                            IsDeleted = false,
                            Name = "Nghe đoạn văn bản dài (tin tức, bài giảng, phỏng vấn) rồi chọn đáp án đúng với chủ đề, mục đích, thái độ, hoặc chi tiết quan trọng..",
                            SkillLevelId = new Guid("83128ff4-d33d-40d6-87ee-b0013eb2521a"),
                            StartQuestionNumber = 44
                        },
                        new
                        {
                            Id = new Guid("79e07d80-703d-48b6-8327-e7396bc2e410"),
                            EndQuestionNumber = 43,
                            IsDeleted = false,
                            Name = "Chọn đáp án phù hợp với nội dung gạch chân trong đoạn văn.",
                            SkillLevelId = new Guid("6d63b5d7-8fc3-45be-a9f1-6af0f651b5e3"),
                            StartQuestionNumber = 39
                        },
                        new
                        {
                            Id = new Guid("40996dd9-4290-432e-aee7-251e20bcb1bc"),
                            EndQuestionNumber = 45,
                            IsDeleted = false,
                            Name = "Chọn đáp án phù hợp với chủ đề của đoạn văn.",
                            SkillLevelId = new Guid("6d63b5d7-8fc3-45be-a9f1-6af0f651b5e3"),
                            StartQuestionNumber = 44
                        },
                        new
                        {
                            Id = new Guid("094a3b15-91fc-43af-9fac-b84f07043a34"),
                            EndQuestionNumber = 50,
                            IsDeleted = false,
                            Name = "Điền từ/cụm từ vào chỗ trống hoặc chọn đáp án chính xác với mục đích của đoạn văn.",
                            SkillLevelId = new Guid("6d63b5d7-8fc3-45be-a9f1-6af0f651b5e3"),
                            StartQuestionNumber = 46
                        });
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba618367-1681-49ae-9d3a-be194de54403"),
                            IsDeleted = false,
                            SkillName = "Nghe"
                        },
                        new
                        {
                            Id = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc"),
                            IsDeleted = false,
                            SkillName = "Đọc"
                        },
                        new
                        {
                            Id = new Guid("1bb8514e-a1a6-4c41-b176-f20124f4044e"),
                            IsDeleted = false,
                            SkillName = "Viết"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SkillLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8d1e161-73a9-46c0-abc3-1552188a0ead"),
                            IsDeleted = false,
                            LevelId = new Guid("e7b61c72-a094-4f81-806e-1a75a878557d"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("203ee981-d694-40e4-8a30-b7c1a1e6ec09"),
                            IsDeleted = false,
                            LevelId = new Guid("fcffbd73-5454-4af6-942d-645d120edac6"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("bcb3d3cd-a148-4562-8b67-ee37c0263bc6"),
                            IsDeleted = false,
                            LevelId = new Guid("3d463174-b4f8-4604-9056-e3638571bc40"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("8aa5e695-9c2f-4f2b-a71d-482618517617"),
                            IsDeleted = false,
                            LevelId = new Guid("58b35613-caf6-42f3-ace9-195f39f2ca86"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("5bda5fed-c4d5-4707-879d-b6abe6f6b787"),
                            IsDeleted = false,
                            LevelId = new Guid("7dc94003-4c5e-44d9-bc58-cf935d8f5fbc"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("83128ff4-d33d-40d6-87ee-b0013eb2521a"),
                            IsDeleted = false,
                            LevelId = new Guid("40945347-4a3d-4938-9ba5-76901120f951"),
                            SkillId = new Guid("ba618367-1681-49ae-9d3a-be194de54403")
                        },
                        new
                        {
                            Id = new Guid("c5afb485-fb72-4f70-842d-5f785281b516"),
                            IsDeleted = false,
                            LevelId = new Guid("e7b61c72-a094-4f81-806e-1a75a878557d"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("038dc84d-84bf-4017-8b51-49041d7c69f1"),
                            IsDeleted = false,
                            LevelId = new Guid("fcffbd73-5454-4af6-942d-645d120edac6"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("1127b458-58e3-482c-8c9a-7cb897482375"),
                            IsDeleted = false,
                            LevelId = new Guid("3d463174-b4f8-4604-9056-e3638571bc40"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("b163baf3-c72b-4763-b23b-001f7747e36c"),
                            IsDeleted = false,
                            LevelId = new Guid("58b35613-caf6-42f3-ace9-195f39f2ca86"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("aca5da63-e3b8-4d4f-a337-982e7585ef95"),
                            IsDeleted = false,
                            LevelId = new Guid("7dc94003-4c5e-44d9-bc58-cf935d8f5fbc"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("6d63b5d7-8fc3-45be-a9f1-6af0f651b5e3"),
                            IsDeleted = false,
                            LevelId = new Guid("40945347-4a3d-4938-9ba5-76901120f951"),
                            SkillId = new Guid("56e413be-c614-41b9-934b-c8b60fb24cfc")
                        },
                        new
                        {
                            Id = new Guid("32dba996-050b-48bc-832a-efbef20c5df4"),
                            IsDeleted = false,
                            LevelId = new Guid("3d463174-b4f8-4604-9056-e3638571bc40"),
                            SkillId = new Guid("1bb8514e-a1a6-4c41-b176-f20124f4044e")
                        },
                        new
                        {
                            Id = new Guid("05fd8057-f016-481d-9edb-52cdee594d01"),
                            IsDeleted = false,
                            LevelId = new Guid("58b35613-caf6-42f3-ace9-195f39f2ca86"),
                            SkillId = new Guid("1bb8514e-a1a6-4c41-b176-f20124f4044e")
                        },
                        new
                        {
                            Id = new Guid("2dbcff6d-8ebd-404d-b89c-d88b71733925"),
                            IsDeleted = false,
                            LevelId = new Guid("7dc94003-4c5e-44d9-bc58-cf935d8f5fbc"),
                            SkillId = new Guid("1bb8514e-a1a6-4c41-b176-f20124f4044e")
                        },
                        new
                        {
                            Id = new Guid("04484630-4111-4afb-aab2-73e703ace410"),
                            IsDeleted = false,
                            LevelId = new Guid("40945347-4a3d-4938-9ba5-76901120f951"),
                            SkillId = new Guid("1bb8514e-a1a6-4c41-b176-f20124f4044e")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Context", b =>
                {
                    b.HasOne("Domain.Entities.Range", "Range")
                        .WithMany("Contexts")
                        .HasForeignKey("RangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Range");
                });

            modelBuilder.Entity("Domain.Entities.Level", b =>
                {
                    b.HasOne("Domain.Entities.ExamType", "ExamType")
                        .WithMany("Levels")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamType");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Context", "Context")
                        .WithMany("Questions")
                        .HasForeignKey("ContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Context");
                });

            modelBuilder.Entity("Domain.Entities.Range", b =>
                {
                    b.HasOne("Domain.Entities.SkillLevel", "SkillLevel")
                        .WithMany("Ranges")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillLevel");
                });

            modelBuilder.Entity("Domain.Entities.SkillLevel", b =>
                {
                    b.HasOne("Domain.Entities.Level", "Level")
                        .WithMany("SkillLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Skill", "Skill")
                        .WithMany("SkillLevels")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Entities.Context", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.ExamType", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Domain.Entities.Level", b =>
                {
                    b.Navigation("SkillLevels");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Entities.Range", b =>
                {
                    b.Navigation("Contexts");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Navigation("SkillLevels");
                });

            modelBuilder.Entity("Domain.Entities.SkillLevel", b =>
                {
                    b.Navigation("Ranges");
                });
#pragma warning restore 612, 618
        }
    }
}
